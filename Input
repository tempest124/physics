import java.awt.event.KeyEvent;
import java.awt.event.KeyListener;

import javax.swing.JPanel;

/**
 * The Input class. This class handles all input.
 * @author Leon Montealegre
 * @version 0.01
 */
public final class Input {
	
	/**
	 * Array of all the keys that have been pressed for the first time.
	 */
	private static boolean[] firstPressedKeys;
	
	/**
	 * Array of all the keys that are being held.
	 */
	private static boolean[] pressedKeys;
	
	/**
	 * Array of all the keys that have been released.
	 */
	private static boolean[] releasedKeys;
	
	/**
	 * Initiates and starts this class.
	 * @param game The game to listen for input from.
	 */
	public static void initiate(JPanel game) {
		firstPressedKeys = new boolean[255];
		pressedKeys = new boolean[255];
		releasedKeys = new boolean[255];
		new Input(game);
	}
	
	/**
	 * Creates a new Input listener.
	 * @param game The game to assign all the listeners to.
	 */
	private Input(JPanel game) {
		KeyListener keyListener = new MyKeyListener();
		game.addKeyListener(keyListener);
	}
	
	/**
	 * Gets if a key was pressed for the first time after being released.
	 * @param key The key to check for.
	 * @return If the key was pressed for the first time after being released.
	 */
	public static boolean getKeyDown(Key key) {
		if (firstPressedKeys[key.keyValue]) {
			firstPressedKeys[key.keyValue] = false;
			return true;
		}
		return false;
	}
	
	/**
	 * Gets if a key is being held.
	 * @param key The key to check for.
	 * @return If the key is being held.
	 */
	public static boolean getKey(Key key) {
		return pressedKeys[key.keyValue];
	}
	
	/**
	 * Gets if a key was released.
	 * @param key The key to check for.
	 * @return If they key was released.
	 */
	public static boolean getKeyUp(Key key) {
		if (releasedKeys[key.keyValue]) {
			releasedKeys[key.keyValue] = false;
			return true;
		}
		return false;
	}
	
	/**
	 * Listens for Key Input.
	 * @author Leon Montealegre
	 * @version 0.01
	 */
	private class MyKeyListener implements KeyListener {
		
		@Override
		public void keyTyped(KeyEvent e) {}
		
		@Override
		public void keyPressed(KeyEvent e) {
			this.updateKeys(e.getKeyCode(), true);
		}
		
		@Override
		public void keyReleased(KeyEvent e) {
			this.updateKeys(e.getKeyCode(), false);
		}
		
		/**
		 * Updates the keys appropriately.
		 * @param code The key code pressed or released.
		 * @param pressed If the key was pressed or released.
		 */
		private void updateKeys(int code, boolean pressed) {
			if (code < 255) {
				if (!pressedKeys[code])
					firstPressedKeys[code] = pressed;
				pressedKeys[code] = pressed;
				releasedKeys[code] = !pressed;
			}
		}
		
	}
	
}
